{"version":3,"sources":["components/selectoption.js","components/room.js","App.js","serviceWorker.js","index.js"],"names":["count","Select","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","startCount","event","setState","target","valueChange","nextProps","disabled","_this2","react_default","a","createElement","onChange","selectChange","bind","map","item","index","key","Component","defaultProps","Rooms","selectedRoom","roomNum","checked","type","selectedRoomData","className","id","htmlFor","selectoption_Select","roomData","roomCount","App","disable","adult","child","data","sessionStorage","getItem","dataParsed","JSON","parse","objectSpread","val","indexOf","stateDisable","x","length","defineProperty","parseInt","setItem","stringify","room_Rooms","onClick","submit","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.58362e78.chunk.js","sourcesContent":["import React, {Component} from 'react';\nconst count = [0,1,2];\n\nexport default class Select extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: props.startCount\n    }\n  }\n  selectChange(event) {\n    this.setState({\n      value: event.target.value\n    })\n    this.props.valueChange(event.target.value);\n  }\n  componentWillReceiveProps(nextProps) {\n    if(this.props.disabled !== nextProps.disabled) {\n      this.setState({\n        value: this.props.startCount\n      })\n    }\n  }\n  render() {\n    return (\n      <select disabled={this.props.disabled} value={this.state.value} onChange={this.selectChange.bind(this)}>\n        {\n          count.map((item, index)=>{\n            return <option key={index}>{item + this.props.startCount}</option>\n          })\n        }\n      </select>\n    )\n  }\n}\n\nSelect.defaultProps = {\n  startCount: 0,\n  disabled: true\n}","import React, { Component } from 'react';\nimport Select from './selectoption';\nimport './common-styles.css';\n\nexport default class Rooms extends Component {\n  selectedRoom(event) {\n    this.props.selectedRoom(this.props.roomNum, event.target.checked);\n  }\n  selectedRoomData(type, value) {\n    this.props.selectedRoomData({\n      roomNum: this.props.roomNum,\n      type,\n      value\n    })\n  }\n  render() {\n    return (\n      <div className=\"room-container\">\n        <div className=\"room-header\">\n          {this.props.roomNum !== 1 && (\n            <input\n              id={this.props.roomNum}\n              type=\"checkbox\"\n              onChange={this.selectedRoom.bind(this)}\n              checked={!this.props.disabled}\n            />\n          )}\n          &nbsp; <label htmlFor={this.props.roomNum}>Room {this.props.roomNum}</label>\n        </div>\n        <div\n          className={\n            this.props.disabled ? 'room-table room-disabled' : 'room-table'\n          }>\n          <table>\n            <tbody>\n              <tr>\n                <td>Adults</td>\n                <td>Children</td>\n              </tr>\n              <tr>\n                <td>(18+)</td>\n                <td>(0-17)</td>\n              </tr>\n              <tr>\n                <td>\n                  <Select startCount={this.props.roomData['adult']} disabled={this.props.disabled} valueChange={this.selectedRoomData.bind(this, 'adult')} />\n                </td>\n                <td>\n                  <Select startCount={this.props.roomData['child']} disabled={this.props.disabled} valueChange={this.selectedRoomData.bind(this, 'child')} />\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nRooms.defaultProps = {\n  roomNum: 1,\n  disabled: true,\n  selectedRoom: (roomNum, value) => { }\n};\n","import React, { Component } from 'react';\nimport './App.css';\nimport Rooms from './components/room';\nconst roomCount = [1, 2, 3, 4];\n\nclass App extends Component {\n  state = {\n    disable: [false, true, true, true],\n    roomData: [\n      { adult: 1, child: 0 },\n      { adult: 1, child: 0 },\n      { adult: 1, child: 0 },\n      { adult: 1, child: 0 },\n    ]\n  };\n  componentDidMount() {\n    const data = sessionStorage.getItem('roomData');\n    if (data) {\n      const dataParsed = JSON.parse(data);\n      this.setState({\n        ...dataParsed\n      })\n    }\n  }\n  selectedRoom(selectedRoom, val) {\n    const index = roomCount.indexOf(selectedRoom);\n    let stateDisable = this.state.disable;\n    let { roomData } = this.state;\n\n    if (val) {\n      for (let x = 1; x < roomCount.length; x++) {\n        stateDisable[x] = true;\n      }\n      for (let x = 1; x <= index; x++) {\n        stateDisable[x] = !val;\n      }\n    } else {\n      for (let x = 1; x < roomCount.length; x++) {\n        stateDisable[x] = true;\n      }\n      for (let x = 1; x < index; x++) {\n        stateDisable[x] = false;\n      }\n    }\n    for (let x = 3; x > index; x--) {\n      roomData[x - 1] = {\n        adult: 1,\n        child: 0\n      }\n    }\n    this.setState({\n      disable: stateDisable,\n      roomData\n    });\n  }\n  selectedRoomData(data) {\n    // {roomNum: 3, type: \"3\", value: \"adult\"}\n    const { roomNum, type, value } = data;\n    let { roomData } = this.state;\n    roomData[roomNum - 1] = {\n      ...roomData[roomNum - 1],\n      [type]: parseInt(value, 10)\n    }\n    this.setState({\n      roomData\n    })\n  }\n  submit() {\n    sessionStorage.setItem('roomData', JSON.stringify(this.state));\n  }\n  render() {\n    return (\n      <div>\n        {roomCount.map((item, index) => {\n          return (\n            <Rooms\n              key={index}\n              roomNum={item}\n              disabled={this.state.disable[index]}\n              selectedRoom={this.selectedRoom.bind(this)}\n              roomData={this.state.roomData[index]}\n              selectedRoomData={this.selectedRoomData.bind(this)}\n            />\n          );\n        })}\n        <div>\n          <button className=\"submit_btn\" onClick={this.submit.bind(this)}>Submit</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}